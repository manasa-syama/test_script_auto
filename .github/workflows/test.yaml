name: Auto Sync Branch

on:
  schedule:
    - cron: '30 2 * * *'  # 8:00 AM IST (2:30 AM UTC)
    - cron: '30 11 * * *'  # 5:00 PM IST (11:30 AM UTC)
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync:
    runs-on: windows-latest

    steps:
      - name: Set up log file
        id: setup_log
        run: |
          $TIMESTAMP = (Get-Date).ToString('yyyyMMdd_HHmmss')
          $LOG_FILE = "member360_services_phase1to2_Sync_log_Dev_$TIMESTAMP.log"
          "Log file created: $LOG_FILE" | Out-File $LOG_FILE
          "$(Get-Date) - Starting sync operation..." | Out-File $LOG_FILE -Append
          echo "::set-output name=log_file::$LOG_FILE"

      - name: Checkout develop branch
        uses: actions/checkout@v4
        with:
          ref: develop  # Checkout the develop branch

      - name: Set up Git
        run: |
          git config --global user.name "manasa-syama"
          git config --global user.email "manasa.syama@gmail.com"

      - name: Fetch branches
        run: |
          git fetch origin source1
          git fetch origin target1

      - name: Check for sa_test branch
        id: check_temp_branch
        run: |
          git fetch origin
          $branchExists = git show-ref --verify --quiet refs/remotes/origin/sa_test
          echo "EXIT-CODE: $LASTEXITCODE "
          # Capture the exit code
          $exitCode = $LASTEXITCODE
          if ($exitCode -eq 0) {
            "sa_test branch exists." | Out-File ${{ steps.setup_log.outputs.log_file }} -Append
            echo "branch_exists=true" >> $env:GITHUB_ENV
          } else {
            "sa_test branch does not exist." | Out-File ${{ steps.setup_log.outputs.log_file }} -Append
            echo "branch_exists=false" >> $env:GITHUB_ENV
          }
          exit 0

      - name: Create or reset sa_test branch
        run: |
          if ($env:branch_exists -eq "true") {
            "***** sa_test branch exists *****" | Out-File ${{ steps.setup_log.outputs.log_file }} -Append
            git reset --hard origin/target1  # Reset sa_test to the latest from target1
          } else {
            git checkout -b sa_test origin/target1  # Create a new sa_test branch
            git push origin sa_test
            "Created new branch sa_test." | Out-File ${{ steps.setup_log.outputs.log_file }} -Append
          }

      - name: Merge Operation
        id: merge_operation_sa_test
        run: |
          git checkout sa_test
          git fetch origin sa_test
          git merge origin/source1
          if ($LASTEXITCODE -ne 0) {
           $output = "Merge failed with exit code $LASTEXITCODE."
           "Error: $output" | Out-File ${{ steps.setup_log.outputs.log_file }} -Append
           throw "Aborting the workflow due to an error during merge."
          } else {
              "Merge successful!" | Out-File ${{ steps.setup_log.outputs.log_file }} -Append
              git push origin sa_test
            }
         

      - name: Merge Operation on target1  
        id: merge_operation_target1
        run: |
          git checkout target1
          git fetch origin target1
          try {
            git merge origin/source1
            "Merge successful!" | Out-File ${{ steps.setup_log.outputs.log_file }} -Append
            git push origin target1 --force
          } catch {
            $output = $_.Exception.Message
            "Error: $output" | Out-File ${{ steps.setup_log.outputs.log_file }} -Append
            if ($output -like "*CONFLICT*") {
              "Merge conflicts detected. Please resolve them." | Out-File ${{ steps.setup_log.outputs.log_file }} -Append
              git merge --abort
            } else {
              "An error occurred during the merge (not a conflict)." | Out-File ${{ steps.setup_log.outputs.log_file }} -Append
            }
            exit 1
          }

      - name: Clean up temporary branch        
        run: |
          git branch -D sa_test  # Delete the local sa_test branch
          git push origin --delete sa_test  # Delete the remote sa_test branch
          "sa_test branch has been deleted." | Out-File ${{ steps.setup_log.outputs.log_file }} -Append

      - name: Upload log
        if: always()  # Ensures this step runs regardless of the outcome of previous steps
        uses: actions/upload-artifact@v4
        with:
          name: sync-log
          path: ${{ steps.setup_log.outputs.log_file }}
