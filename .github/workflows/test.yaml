name: Auto Sync Branch

on:
  # push:
  #   branches:
  #     - source1  # Trigger on pushes to source1
  workflow_dispatch:  # Allows manual triggering of the workflow
permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v2
        with:
          ref: develop  # Checkout the develop branch where the workflow file resides

      - name: Set up Git
        run: |
          git config --global user.name "manasa-syama"
          git config --global user.email "manasa.syama@gmail.com"

      - name: Fetch branches
        run: |
          git fetch origin source1
          git fetch origin target1

      - name: Check for sa_test branch
        id: check_temp_branch
        run: |
          git fetch origin
          if git show-ref --verify --quiet refs/remotes/origin/sa_test; then
            echo "sa_test branch exists."
            echo "branch_exists=true" >> $GITHUB_ENV
          else
            echo "sa_test branch does not exist."
            echo "branch_exists=false" >> $GITHUB_ENV
          fi

      - name: Create or reset sa_test branch
        run: |
          if [ "${{ env.branch_exists }}" == "true" ]; then
           echo "*****sa_test branch exists*****"
           git reset --hard origin/target1  # Reset temp1 to the latest from source1
          else
            git checkout -b sa_test origin/target1  # Create a new temp1 branch
            # git add .
            # git commit -m "Created new branch sa_test"
            # git pull
            git push origin sa_test
          fi

      - name: Merge Operation
        id: merge_operation
        run: |
          git checkout sa_test
          output=$(git merge origin/source1 2>&1) || {
            echo "Merge failed. Output: $output"
            if echo "$output" | grep -q "CONFLICT"; then
               echo "Merge conflicts detected. Please resolve them."
               git merge --abort
            fi
            exit 1
          }
          echo "Merge successful!"
          git push origin sa_test               
          
     
      - name: Sync to target1 (if no conflicts)        
        run: |
          git checkout target1
          output=$(git merge origin/source1 2>&1) || {
            echo "Merge failed. Output: $output"
            if echo "$output" | grep -q "CONFLICT"; then
               echo "Merge conflicts detected. Please resolve them."
               git merge --abort
            fi
            exit 1
          }
          echo "Merge successful!"
          git push origin target1               
          

      - name: Clean up temporary branch        
        run: |
          git branch -d sa_test  # Delete the local sa_test branch
          git push origin --delete sa_test  # Delete the remote sa_test branch
          echo "sa_test branch has been deleted."
