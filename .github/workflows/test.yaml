name: Auto Sync Branch

on:
  # push:
  #   branches:
  #     - source1  # Trigger on pushes to source1
  workflow_dispatch:  # Allows manual triggering of the workflow
permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v2
        with:
          ref: develop  # Checkout the develop branch where the workflow file resides

      - name: Set up Git
        run: |
          git config --global user.name "manasa-syama"
          git config --global user.email "manasa.syama@gmail.com"

      - name: Fetch branches
        run: |
          git fetch origin source1
          git fetch origin target1

      - name: Check for sa_test branch
        id: check_temp_branch
        run: |
          git fetch origin
          if git show-ref --verify --quiet refs/remotes/origin/sa_test; then
            echo "sa_test branch exists."
            echo "branch_exists=true" >> $GITHUB_ENV
          else
            echo "sa_test branch does not exist."
            echo "branch_exists=false" >> $GITHUB_ENV
          fi

      # - name: Create or reset sa_test branch
      #   run: |
      #     if [ "${{ env.branch_exists }}" == "true" ]; then
      #      echo "*****sa_test exists*****"
      #      git reset --hard origin/target1  # Reset temp1 to the latest from source1
      #     else
      #       git checkout -b sa_test origin/target1  # Create a new temp1 branch
      #       # git add .
      #       # git commit -m "Created new branch sa_test"
      #       git pull
      #       git push origin sa_test
      #     fi

      - name: Merge Operation
        id: merge_operation
        run: |
          git checkout sa_test
          git merge origin/source1
          # if [ $? -ne 0 ]; then
          #  echo "Merge failed: $output"
          #  echo "merge_output=${output//$'\n'/\\n}" >> $GITHUB_ENV
          #  exit 1  # Exit with an error code to stop the workflow
          # fi
         
          
      # - name: Display merge output
      #   run: echo "Merge output:${{ env.merge_output }}"    
            
      #       # Check for changes before committing
      #       if [ -n "$(git status --porcelain)" ]; then
      #         git commit -m "Merged origin/source1 into $(git rev-parse --abbrev-ref HEAD)"
      #       else
      #         echo "No changes to commit."
      #       fi
      #     fi

      # - name: Push Changes
      #   run: |
      #     if [ "${{ env.merge_output }}" != "Merge failed" ]; then
      #       git push origin HEAD:$(git rev-parse --abbrev-ref HEAD)
      #     else
      #       echo "Not pushing changes due to merge failure."
      #     fi

      # - name: Show Merge Output
      #   run: echo "Merge Output:${{ env.merge_output }}"
          
      # - name: Show Merge Output
      #   run:  echo "Merge Output:${{env.merge_output}}"
        
      # - name: Check for Merge Conflicts
      #   id: check_conflicts
      #   run: |
      #     if git ls-files -u | grep -q .; then
      #       echo "Merge conflicts detected."
      #       echo "conflicts=true" >> $GITHUB_ENV
      #       git merge --abort  # Abort the merge
      #     else
      #       echo "No conflicts detected."
      #       echo "conflicts=false" >> $GITHUB_ENV
      #       git commit -m "Merged source1 into sa_test"  # Commit the merge if no conflicts
      #       git push origin $(git rev-parse --abbrev-ref HEAD)
      #     fi

      # - name: Sync to target1 (if no conflicts)
      #   if: env.conflicts == 'false'
      #   run: |
      #     git checkout target1
      #     git merge sa_test
      #     git push origin target1

      # - name: Clean up temporary branch
      #   if: env.conflicts == 'false'
      #   run: |
      #     git branch -D sa_test
